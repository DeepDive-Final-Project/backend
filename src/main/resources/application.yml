spring:
  config:
    import: optional:file:.env[.properties]
  application:
    name: I-Contact

  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:i_contact_local}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:root}
    driver-class-name: com.mysql.cj.jdbc.Driver

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}

    mongodb:
      host: ${MONGO_HOST}
      port: ${MONGO_PORT:27017}
      database:  ${MONGO_DATABASE}
      username: ${MONGO_USERNAME}
      password: ${MONGO_PASSWORD}
      authentication-database: admin

  jpa:
    defer-datasource-initialization: true
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        default_batch_fetch_size: 1000
        order_inserts: true
        order_updates: true
        jdbc:
          time_zone: Asia/Seoul

  logging:
    level:
      org.springdoc: DEBUG
      org.hibernate.SQL: DEBUG
      org.springframework.security: DEBUG

  jwt:
    secret: ${JWT_SECRET:ThisIsAReallyStrongSecretKeyForJwt12345}
    expiration: ${JWT_EXPIRATION:3600000}

  security:
    user:
      name: admin
      password: admin
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            scope:
            - user:email
            - read:user
            redirect-uri: ${GITHUB_REDIRECT_URI}
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: profile, email
            redirect-uri: ${GOOGLE_REDIRECT_URI}
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: ${KAKAO_REDIRECT_URI}
            scope: account_email
            client-name: Kakao
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
#          naver:
#            client-id: your-naver-client-id
#            client-secret: your-naver-client-secret
#            client-authentication-method: POST
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#            scope: name, email
#            client-name: Naver

  cloud:
    aws:
      s3:
        bucket: ${S3_BUCKET_NAME}
        default-image: ${CLOUD_AWS_S3_DEFAULT_IMAGE}
      credentials:
        access-key: ${S3_ACCESS_TOKEN}
        secret-key: ${S3_SECRET_ACCESS_TOKEN}
      region:
        static: ${S3_REGION}
      servlet:
        multipart:
          max-file-size: 10MB
          max-request-size: 10MB

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "*"
      cors:
        allowed-origins: "*"
        allowed-methods: "*"
  endpoint:
    health:
     show-details: always
  metrics:
    export:
      prometheus:
        cachetime-to-live: 0ms
        sensitive: false
  security:
    enabled: false
  prometheus:
    metrics:
      export:
        enabled: true

server:
  forward-headers-strategy: framework
  tomcat:
    threads:
      max: 500  # 동시에 처리 가능한 최대 쓰레드 수 (기본 200)
      min-spare: 50  # 대기 중인 최소 쓰레드 수
    max-connections: 10000  # 최대 동시 연결 수 (기본 8192)
    accept-count: 1000  # 요청 큐 크기 (처리 중일 때 대기 가능 요청 수)
    connection-timeout: 20000  # 연결 타임아웃 (ms)
